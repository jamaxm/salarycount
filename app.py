import streamlit as st

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="KPI –∏ –û–∫–ª–∞–¥ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="centered", initial_sidebar_state="collapsed")

# --- –¢—ë–º–Ω–∞—è —Ç–µ–º–∞ —á–µ—Ä–µ–∑ –∫–∞—Å—Ç–æ–º–Ω—ã–π CSS ---
st.markdown("""
    <style>
        .stApp { background-color: #111111; color: white; }
        h1, h2, h3, h4, h5, h6 { color: #ffffff; }
        .css-10trblm, .css-1v0mbdj, .css-1cpxqw2 { color: #ffffff !important; }
        .stNumberInput input, .stSlider { background-color: #222222 !important; color: white !important; }
        .stSlider > div[data-baseweb="slider"] { background-color: #444444; }
        .stTabs [role="tablist"] { border-bottom: 1px solid #444; }
        .stTabs [role="tab"] { color: #ccc; }
        .stTabs [aria-selected="true"] { color: white; background-color: #222; border-bottom: 2px solid #0f9d58; }
        table { color: white; }
        .stAlert-success { background-color: #1e4620; border-color: #145a32; color: #d4edda; }
    </style>
""", unsafe_allow_html=True)

# --- –ì—Ä–∞—Ñ–∏–∫–∏ —Å–º–µ–Ω ---
shifts = {
    "07:00-16:00": (7, 16),
    "08:00-17:00": (8, 17),
    "08:30-17:30": (8.5, 17.5),
    "09:00-18:00": (9, 18),
    "09:30-18:30": (9.5, 18.5),
    "10:00-19:00": (10, 19),
    "11:00-20:00": (11, 20),
    "12:00-21:00": (12, 21),
    "14:00-23:00": (14, 23),
    "15:00-00:00": (15, 24),
    "16:00-01:00": (16, 25),
    "17:00-02:00": (17, 26),
    "21:00-09:00": (21, 33)
}

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥ ---
def format_money(val):
    return f"{int(val):,}".replace(",", " ")

# --- –†–∞—Å—á—ë—Ç KPI –ø–æ –ø–æ—Ä–æ–≥–∞–º ---
def calculate_kpi(value, thresholds, reverse=False):
    sorted_thresholds = sorted(thresholds, reverse=not reverse)
    for threshold, percent in sorted_thresholds:
        if (not reverse and value >= threshold) or (reverse and value <= threshold):
            return percent
    return thresholds[-1][1] if reverse else 0

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üíº –†–∞—Å—á—ë—Ç KPI –∏ –æ–∫–ª–∞–¥–∞")

with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å..."):
    st.markdown("---")

    # --- KPI ---
    st.header("üìä –†–∞—Å—á—ë—Ç KPI")

    total_bonus = st.number_input("–û–±—â–∞—è —Å—É–º–º–∞ KPI (–≤ —Å—É–º–∞—Ö)", value=2_126_000, step=100_000)
    quality = st.slider("–ö–∞—á–µ—Å—Ç–≤–æ (%)", 91, 100, 100)
    svd = st.slider("–°–í–î (—Å–µ–∫)", 100, 140, 120)
    svz = st.slider("–°–í–ó (—Å–µ–∫)", 120, 150, 130)
    cs = st.slider("CS", 4.4, 5.0, 4.8, step=0.01)

    # --- –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ---
    quality_tiers = [(100, 100), (99, 90), (98, 80), (97, 70), (96, 60), (95, 50), (94, 40), (93, 30), (92, 20), (91, 10)]
    svd_tiers = [(120, 100), (125, 80), (130, 60), (135, 30), (140, 0)]
    svz_tiers = [(130, 100), (135, 90), (140, 80), (145, 70), (150, 0)]
    cs_tiers = [(5.0, 100), (4.8, 100), (4.7, 80), (4.6, 60), (4.5, 30), (4.49, 0)]

    weights = {"quality": 0.4, "svd": 0.25, "svz": 0.25, "cs": 0.1}

    # --- –†–∞—Å—á—ë—Ç—ã KPI ---
    quality_percent = calculate_kpi(quality, quality_tiers)
    svd_percent = calculate_kpi(svd, svd_tiers, reverse=True)
    svz_percent = calculate_kpi(svz, svz_tiers, reverse=True)
    cs_percent = calculate_kpi(cs, cs_tiers)

    quality_sum = total_bonus * weights["quality"] * quality_percent / 100
    svd_sum = total_bonus * weights["svd"] * svd_percent / 100
    svz_sum = total_bonus * weights["svz"] * svz_percent / 100
    cs_sum = total_bonus * weights["cs"] * cs_percent / 100
    total_kpi = quality_sum + svd_sum + svz_sum + cs_sum

    # --- –í—ã–≤–æ–¥ KPI ---
    st.subheader("üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã KPI:")
    st.write(f"KPI –ø–æ –∫–∞—á–µ—Å—Ç–≤—É: **{format_money(quality_sum)} —Å—É–º**")
    st.write(f"KPI –ø–æ –°–í–î: **{format_money(svd_sum)} —Å—É–º**")
    st.write(f"KPI –ø–æ –°–í–ó: **{format_money(svz_sum)} —Å—É–º**")
    st.write(f"KPI –ø–æ CS: **{format_money(cs_sum)} —Å—É–º**")
    st.success(f"–ò—Ç–æ–≥–æ–≤—ã–π KPI: **{format_money(total_kpi)} —Å—É–º**")

    # --- –û–∫–ª–∞–¥ ---
    st.header("üí∞ –†–∞—Å—á—ë—Ç –æ–∫–ª–∞–¥–∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ")

    hourly_rate = st.number_input("–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Å—É–º/—á–∞—Å)", value=27_560, step=1000)

    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –ø–æ –≥—Ä–∞—Ñ–∏–∫—É:")
    total_salary = 0
    night_hours = 0

    for shift_name, (start, end) in shifts.items():
        count = st.number_input(f"{shift_name}", min_value=0, value=0, step=1)
        total_hours = end - start - 1  # –í—ã—á–∏—Ç–∞–µ–º 1 —á–∞—Å –Ω–∞ –æ–±–µ–¥ –∏ –ø–µ—Ä–µ—Ä—ã–≤—ã
        normal = 0
        night = 0
        for h in range(int(start), int(end)):
            hour_mod = h % 24
            if 22 <= hour_mod or hour_mod < 6:
                night += 1
            else:
                normal += 1
        effective_normal = max(normal - 1, 0)  # —É—á—ë—Ç 1 —á–∞—Å–∞ –≤—ã—á–µ—Ç–∞
        total_salary += count * (effective_normal * hourly_rate + night * hourly_rate * 1.5)
        night_hours += count * night

    taxed_salary = total_salary * 0.88

    st.subheader("üìÑ –û–∫–ª–∞–¥:")
    st.write(f"–û–±—â–∏–π –æ–∫–ª–∞–¥ (–¥–æ –Ω–∞–ª–æ–≥–æ–≤): **{format_money(total_salary)} —Å—É–º**")
    st.write(f"–í —Ç–æ–º —á–∏—Å–ª–µ {int(night_hours)} –Ω–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤ √ó1.5")
    st.success(f"üí∏ –ß–∏—Å—Ç—ã–º–∏ –Ω–∞ —Ä—É–∫–∏ (–ø–æ—Å–ª–µ 12% –Ω–∞–ª–æ–≥–∞): **{format_money(taxed_salary)} —Å—É–º**")

    # --- –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ ---
    final_total = total_kpi + taxed_salary
    st.header("üßæ –û–±—â–∞—è —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é")
    st.success(f"üíµ –í—Å–µ–≥–æ: **{format_money(final_total)} —Å—É–º** (KPI + –û–∫–ª–∞–¥ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–∞)")
